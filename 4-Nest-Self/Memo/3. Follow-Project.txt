1. Email, Password 암호화 작업
1-1. cookie-session을 Middleware로 처리했을 떄 Controller에서 @Session() session을 통해 받을 수 있습니다.
1-2. session을 설정하면 자동으로 응답에 첨부됩니다.
1-3. 클라이언트는 자동으로 받은 쿠키를 요청에 사용합니다.

parseInt() : 문자열을 정수로 변환하는 함수입니다.

1-4. password 암호화
1. salt(임의의 문자열)을 생성합니다.
(crypto.RandomBytes()를 사용하여 랜덤 문자열을 생성합니다.)
(이 떄 호환성을 위해 node:crypto가 아닌 crypto 객체를 사용합니다.)
2. 패스워드와 salt와 함께 해시처리합니다.
3. salt + '.' + hash.toString('hex')로 password를 만들어내어 password로 저장합니다.

2. cookie-session 라이브러리
2-1. const cookieSession = require('cookie-session')으로 가져와야 동작합니다.
2-2. Module 내에서 configure(consumer){consumer.applye(cookieSession({keys : [...]}))}로 동작합니다.
2-3. 처음 요청이 전달되면 라우트 인자에서 @Session() session을 통해 session에 접근할 수 있습니다.
=> 이 떄는 빈 값입니다.
2-4. 로직을 처리한 뒤 session.userId = 10; 같이 session을 조작하면 cookie-session의 keys의 value로 암호화하여
client에게 전달합니다. (session을 조작하지 않아도 빈 객체가 session으로 나가 클라이언트에게 전달됩니다.)
2-5. 다시 요청이 전달되면 클라이언트에 저장된 세션 쿠키 값이 자동으로 첨부되어 서버에 전달됩니다.


3. Middleware
=> 미들웨어는 클라이언트 요청을 처리하는 초반 단계로 요청을 변형, 추가 작업을 합니다.
=> 항상 인터셉터나 가드보다 빠르게 실행됩니다.
=> 애플리케이션이 시작할 떄 해당 모듈이 읽히면서 미들웨어가 설정됩니다.
=> AppModule을 제외한 각 Module 들의 Middleware는 해당 모듈에서만 동작합니다.

3-1. 모듈 데코레이터가 붙은 클래스에서 configure(){}를 호출하면 미들웨어를 생성할 수 있습니다.

3-2. configure(consumer : MiddlewareConsumer){}
=> apply() : 사용할 미들웨어를 지정합니다.
=> forRoutes() : 미들웨어를 적용할 라우트를 지정합니다. 이 떄 all, controller, routes..에 적용이 가능합니다.
=> exclude() : 특정 라우트에서 미들웨어를 pass하게 합니다.
