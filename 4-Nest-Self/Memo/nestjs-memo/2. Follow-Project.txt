1. TypeORM 설정
1-1. Review를 위해서 sqlite3를 선택합니다. (MySQL2로 넘어갈 예정)
1-2. AppModule에서 TypeOrmModule.forRoot({}) 초기 설정
=> 데이터베이스 연결을 설정합니다.
=> TypeORM의 설정 값을 애플리케이션 전역에 적용합니다.
(
type: 사용할 데이터베이스의 종류를 지정 (postgres, mysql, sqlite, 등)
host: 데이터베이스 서버의 호스트
port: 데이터베이스의 포트 번호
username: 데이터베이스 사용자 이름
password: 데이터베이스 비밀번호
database: 데이터베이스 이름
entities: 데이터베이스 테이블과 연결되는 엔티티 클래스 배열
synchronize: true일 경우 애플리케이션 시작 시 TypeORM이 데이터베이스와 스키마를 동기화합니다. 
logging: 쿼리 로그를 출력할지 여부
)

1-3. 각 모듈에서 TypeOrmModule.forFeature([entities..])를 설정합니다.
=> 특정 모듈에서 사용할 엔티티를 등록하여 해당 모듈에서만 사용되도록 합니다.
=> 모듈 내에서 Repository를 사용할 수 있게 만들어 줍니다.
=> 즉, repo를 통해 DB 엑세스를 가능케 합니다.


2. Service를 생성하고 repo 연결하기
2-1. typeOrmModule.forRoot()를 통해 DB 설정을 완료하고
2-2. typeOrmModule.forFeature()를 통해 엔티티를 등록했다면 repository를 사용할 수 있습니다.
2-3. @InjectRepository(entity)를 통해 해당되는 repo를 가져옵니다.
2-4. private repo : Repository<User>를 통해 타입 가져오고 제네릭를 넣어서 타입을 완성시킵니다.


3. create({..})
=> DB 칼럼과 일치하는 데이터를 객체 형식으로 추가합니다.
=> 엔티티 인스턴스가 생성됩니다. (객체일 뿐 DB에 영향을 주지 않습니다.)

4. await this.repo.save(userInstance)
=> 비동기으로 동작합니다.
=> 실제 DB에 저장하는 repo 메서드입니다.
=> 반환 값으로 DB에 저장된 값이 반환됩니다.