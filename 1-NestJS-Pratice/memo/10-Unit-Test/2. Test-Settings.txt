1. npm run test:watch
=> NestJS의 테스트를 전부 실행하는 명령어입니다.
=> 이 떄 p를 누르면 하나의 테스트 파일만 실행할 수 있습니다.
=> ex) pattern > auth.service.spec


2. import { Test } from '@nestjs/testing';
=> 테스트 모듈을 생성하고, NestJS의 DI(의존성 주입) 컨테이너를 테스트할 수 있습니다.


3. it()
=> Jest에서 제공하는 테스트 함수입니다.
=> Jest에서 각 테스트 케이스를 정의하는 함수입니다.
=> it('설명', ()=>{// 테스트 코드})


4. describe('', ()=>{})
=> 여러 개의 it() 테스트를 묶을 수 있게 해줍니다.
=> 일종의 테스트 그룹입니다.


5. beforeEach(()=>{})
=> 각각의 테스트가 실행되기 전에 실행되는 함수입니다.
=> 테스트가 여러 개일 떄 공통된 초기화 작업을 설정할 때 유용하게 사용됩니다.


6. afterEach(()=>{})
=> 각각의 테스트가 실행된 후에 실행되는 함수입니다. 
=> 주로 클린업 작업에 사용됩니다.


7. const moudle = Test.createTestingModule({
    providers : [AuthService, {
        provide : UserService,
        useValue : fakeUserService
    }]
}).compile()
7-1. 테스트 환경에서 NestJS 모듈을 생성합니다.
7-2. 가짜 Service를 의존성 컨테이너에 등록합니다.
7-3. 4-2를 기반으로 .compile()은 NestJS DI 컨테이너를 초기화합니다.


8. 테스트 의존성 컨테이너을 받은 module
=> module을 통해 테스트 할 수 있습니다.
=> const service = module.get(AuthService) 
(가짜 의존성 컨테이너의 AuthService 서비스를 꺼내옵니다.)


9. expect()
=> Jest에서 제공하는 단언 함수입니다.
=> 테스트에서 기대한 값과 실제 값이 일치하는지 확인하는 역할을 합니다.
=> 다양한 매처를 사용하여 기대값을 확인합니다.


10. 설명
=> providers의 배열의 값들은 DI 컨테이너에 주입하려 할 수 있는 모든 클래스의 리스트입니다.
=> 만약 AuthService가 UserService의 의존성을 얻기 위해 constructor에 정의했다면 DI 컨테이너는 이를
 알아차리고 인스턴스를 생성하여 부여합니다.
=> 그러나 설정한 DI 컨테이너는 UserService의 값을 fake 값으로 바꿔서 저장하는 fake가 등록되어 있습니다.
=> fakeService의 인스턴스를 UserService의 인스턴스처럼 제공합니다.

=> Test에서 beforeEach을 통해 공통 초기화 작업을 실행할 떄 it 스코프와 beforeEach 스크프는 다릅니다.
=> 이를 해결하기 위해서 describe에 let service : Service;를 정의하고 사용합니다.