1. NestJS 관계
=> 데코레이터를 통해 일대일, 다대일, 대다대 관계를 설정할 수 있습니다.
=> 엔티티에 관계 데코레이터를 사용합니다.


2. @OneToMany(), @ManyToOne()
=> 두 관계를 설정하면 NestJS는 Many인 테이블에 변경을 초래합니다.
=> FK을 Many인 테이블에 전달합니다.

** 순환 의존성
=> TypeOrmModule.(async)forRoot({})의 entities에서 각 엔티티를 로드하고 테이블을 생성합니다.
=> 이 때 서로 엔티티를 참조하는 경우 무엇을 먼저 로드할지, 로드된 이후 또 로드되는 현상이 일어날 수 도 있습니다.
=> 이를 방지하기 위해 다대일 관계를 맺는 경우 관계 데코레이터 첫 번쨰 인자에 참조 엔티티를 반환하는 방식으로
 해결합니다.


3.@OneToMany(()=>Report, (report)=> report.user)
 reports : Report[];
=> user.reports에 접근하면 해당 유저의 모든 보고서에 접근할 수 있습니다.
=> 자동으로 가져오지는 않습니다.

3-1. ()=>Report
=> Report 엔티티를 반환합니다.
=> 해당 속성이 언제 등록될지 모르기 떄문입니다.

3-2. (report)=>report.user
=> report 엔티티에서 사용자를 가리키는 속성입니다.
=> report 쪽에서 바라본 관계가 무엇인지 알려줍니다.

3-3. reports : Report[];
=> 한 명의 유저가 여러 개의 Report 엔티티를 가질 수 있기에 배열 형태입니다.


4. @ManyToOne(()=> User, (user)=> user.reports)
 user : User;
=> reports.user에 접근할 수 있습니다. report를 작성한 user를 찾을 수 있습니다.
=> 자동으로 가져오지는 않습니다.

4-1. user : User
=> 하나의 엔티티만 참조함므로 단일 객체를 의미합니다.


5. 관계 데코레이터 두 번쨰 인자
=> TypeORM이 양방향 관계를 이해할 수 있도록 설정하는 역할을 합니다.
=> User 입장에서 첫 번쨰 인자를 통해 Report의 관계를 설정했고
 reports 입장에서 user는 하나라고 관계를 또 설정해야 안전합니다.

