1. RootModule 파일에서 import {TypeOrmModule} from '@nestjs/typeorm'를 가져옵니다.

2. imports 키에서 TypeOrmModule.forRoot를 호출합니다.
=> TypeORM을 초기화하고 해당 설정을 DI 컨테이너에 등록하는 역할을 합니다.
=> TypeORM의 설정값이 NestJS 애플리케이션에 중앙 집중식을 저장, 이 설정 바탕으로 DB 연결됩니다.


3. DataSource
=> TypeORM에서 데이터베이스와의 연결을 관리하는 핵심 객체입니다.
=> 예) SQL 쿼리, 테이블 관리...
=> 하나의 애플리케이션에서 단 하나의 DataSource 인스턴스만 존재합니다. => 싱글턴 패턴
=> App Module에 DB 연결(DI 컨테이너에 등록)으로 각 서비스들은 DataSource를 
 주입받아서 DB와 상호작용할 수 있습니다.
=> 같은 인스턴스를 사용하기에 매번 DB 연결을 만들지 않고 같은 연결을 재사용합니다.


4. forRoot()의 설정 객체
4-1. type => 데이터베이스 종류를 지정하는 필드입니다. (sqlite, mysql, postgres, mongodb..)
4-2. database => 사용할 데이터베이스의 경로를 지정하는 옵션입니다.
4-3. entities => 엔티티 클래스들을 배열로 지정하는 곳입니다.
4-4. synchronize 
=> DB 스키마 자동 동기화를 활성화하는 옵션입니다.
=> true라면 애플리케이션이 실행될 때마다 엔티티에 맞춰 데이터베이스 테이블을 자동으로 생성/변경합니다.
=> false라면 테이블을 자동으로 변경하지 하지 않고, 스키마 변경이 필요하면 마이그레이션을 수동으로 설정합니다.
....