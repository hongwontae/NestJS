4. 데이터 업데이트
4-1. update({id : 1}, {name : 'updated Name'})
=> 특정 조건을 만족하는 데이터 업데이트입니다.
=> 엔티티 인스턴스를 받지 않고 DTO 형식을 갖춘 객체만 받습니다.
=> 즉, 바로 SQL를 실행합니다.

4-2. find를 통해 찾고 save를 통해 엔티티를 저장합니다.
4-3. update({},{}) => 여러 데이터를 업데이트할 수 있습니다.


5. 데이터 삭제
5-1. delete(1) => 특정 ID의 데이터를 삭제합니다.
5-2. delete([1,2,3]) => 여러 개를 삭제합니다.
5-3. delete({age : 20}) => 특정 조건 만족하는 데이터를 삭제합니다.
5-4. clear() => 전체를 삭제합니다.
5-5. find 이후 remove() => 특정 객체를 가져와서 삭제합니다.
=> delete 메서드들은 엔티티 인스턴스를 받지 않고 ID 또는 조건 객체를 받습니다.
=> 즉, 바로 SQL를 실행합니다.

5-6. remove(entityInstance) => 엔티티 인스턴스를 인자로 받고 삭제합니다.


6. 소프트 삭제
=> 실제 데이터를 지우지 않고 deletedAt 등의 컬럼을 설정하여 "삭제된 것처럼" 처리하는 방식입니다.

6-1. 소프트 삭제를 위해서는 Entity 칼럼 설정을 해야 합니다.
@DeleteDateColumn()
deletedAt?: Date;

6-2. softDelete(1) => 소프트 삭제
6-3. restore(1) => 복구
6-4. delete(1) => 완전히 삭제