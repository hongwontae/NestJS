1. TS 데코레이터
=> 클래스, 메서드, 속성 등에 메타데이터를 추가하는 기능입니다.
=> 함수처럼 동작하지만, 특정 대상(클, 메, 속)에 붙여서 동작을 변경할 수 있습니다.
=> 목적 : 코드의 구조를 변경하지 않으면서 추가적인 기능 삽입 + 수정하는 방법을 제공합니다.


** 데코레이터는 클래스, 메서드, 속성, 매개변수를 인자로 받아서 추가적인 정보 부여나 변형을 일으킵니다.
=> 데코레이터가 클래스, 메서드, 속성, 매개변수를 받아서 변형하거나 없애거나 초기화합니다.
=> 즉, 첫 번쨰로 실행되는것은 데코레이터입니다.


2. 데코레이터 설정
=> 데코레이터를 사용하려면 tsconfig.json에서 experimentalDecorators : true를 추가해야 합니다.


5. 데코레이터 기본 구조
=> 함수로 정의합니다.
=> 함수는 다양한 인수를 받아 기능을 수행합니다.


4. 데코레이터의 종류
=> 클래스 데코, 메서드 데코, 속성 데코, 매개변수 데코가 존재합니다.


5. 클래스 데코레이터
5-1. 클래스 선언 위에 사용됩니다.
5-2. 클래스 데코레이터는 생성자 함수를 매개변수로 받습니다.
5-3. 클래스가 정의된 직후 실행됩니다.


6. 메서드 데코레이터
6-1. 클래스의 메서드 위에 사용됩니다.
6-2. target, propertyKey, descriptor를 인자로 받습니다.
(target : 메서드를 포함한 클래스, peopertyKey : 메서드 이름, descriptor : 메서드의 속성 정보를 담고 있는 객체)
6-3. 메서드가 정의될 떄 실행됩니다.


7. 속성 데코레이터
7-1. 클래스의 속성 위에 사용됩니다.
7-2. target, propertyKey를 인자로 받습니다.
(target : 속성을 포함한 클래스, propertyKey : 속성의 이름)
7-3. 속성이 정의될 떄 실행됩니다.


8. 매개변수 데코레이터
8-1. 메서드의 매개변수 앞에서 사용됩니다.
8-2. target, peopertyKey, parameterIndex를 인자로 받습니다.
(target : 메서드를 포함한 클래스, propertyKey : 메서드의 이름, parameterIndex : 매개변수의 위치)
8-3. 메서드가 정의될 떄 실행됩니다.


9. 데코레이터 실행 우선 순위
=> 클래스 데코 > 메서드 데코 > 속성 데코

