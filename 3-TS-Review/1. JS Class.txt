1. JS의 클래스
=> 객체 지향 프로그래밍을 위한 문법적인 설탕입니다.
=> 프로토타입 기반 상속을 직관적으로 사용하기 위한 ES6 문법입니다.


2. 클래스 기본 구조
2-1. class className {}으로 정의합니다.
2-2. constructor => 객체가 생성될 떄 실행되는 생성자 함수입니다.
2-3. method(){} =>  클래스 중괄호 안에 메서드를 정의할 수 있습니다.
2-4. this => 생성할 객체을 의미합니다.
=> this를 통해 프로퍼티를 생성할 수 있고 메서드 정의를 통해 인스턴스 메서드를 생성할 수 있습니다.


3. 클래스 상속
3-1. extends 키워드를 통해 다른 클래스를 상속할 수 있습니다.
=> class Student extends Person{}
3-2. 상속받은 클래스에서 super()를 호출하여 부모 클래스의 constructor를 호출할 수 있습니다.
3-3. 만약 부모 클래스의 constructor가 존재하지 않는다면 super()를 호출하지 않아도 상속받을 수 있습니다.


4. 정적 메서드
=> 인스턴스가 아닌 클래스 자체에서 호출할 수 있는 메서드입니다.


5. getter/setter
=> 인스턴스 객체 프로퍼티에 접근하거나 쓸 떄 접근을 가로채서 업무를 수행하는 메서드입니다.
=> get 프로퍼티이름(){}, set 프로퍼티이름(){} => 이런 식으로 정의하여 사용합니다.


6. private 필드
=> ES2000부터 # 키워드를 통해 클래스 내부에서만 접근할 수 있는 프로퍼티를 생성할 수 있습니다.
=> #balance = 0; => 인스턴스 객체가 호출할 수 없습니다.


7. 클래스는 프로토타입 기반입니다.
=> const dog = new Animal();
=> dog.__proto__ === Animal.prototype
=> 인스턴스 객체에 클래스 메서드가 직접적으로 할당되는게 아닌 인스턴스 객체 __proto__에 접근하여
클래스의 .prototype에 접근하는 프로토타입 체인을 이용해 메서드를 사용하는 구조입니다.
=> 즉, 인스턴스 객체에 직접적으로 메서드를 할당하는게 아니라 class.prototype.methods를 참조하기에
 메모리 효율이 좋습니다.

