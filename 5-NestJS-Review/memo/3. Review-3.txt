1. 요청 데이터 취합하기
    1-1. @Param('..')
    => :id

    1-2. @Query()
    => 쿼리 파라미터를 받습니다.

    1-3. @Headers()
    => 

    1-4. @Body()
    => 본문을 받습니다.
=> common 라이브러리에 요청 데이터 취합 데코레이터가 있습니다.
=> 이들은 인자 데코레이터라고 불립니다. (인자에 사용되기 떄문에)


2. pipe
2-1. 라우트 핸들러에 요청이 도착하기 전에 요청에 담긴 데이터를 검증하여 통과시키거나 되돌리는 과정입니다.
2-2. DTO 유효성 검증을 하려면 class-validator, class-transformer를 설치해야 합니다.
    1. class-transformer는 일반 객체(or Json 객체)를 받아서 클래스의 인스턴스로 변환하는 패키지입니다.
    2. class-validator는 어떤 클래스의 속성에 대한 검증을 실행합니다.

2-3. 요청 데이터 파이프 + DTO로 검증하는 방법
    1. DTO를 생성합니다 export class MessageDto(){}
    2. 클래스 내부에 유입될 것이라고 예상되는 데이터 타입을 규정합니다. content : string;
    3. class-validator에서 받을 것이라고 예상되는 타입의 데코레이터를 가져옵니다. @IsString()
    4. 결합합니다.
        => @IsString()
            content : string;
    5. 검증 + 파이프를 사용할 라우트 핸들러에서 인자에 body의 타입으로 DTO class를 그대로 사용합니다.
    => 이제 계속 검증합니다.

    6. 순서
        1. 들어오는 데이터 class-transformer를 통해 dto class의 인스턴스로 변환합니다.
        2. 인스턴스는 class-validator에 의해 검증합니다.
        3. 검증된 데이터는 라우트 핸들러에 전달 or 검증 실패는 되돌립니다.



3. DTO
=> 유입되는 요청이 갖고 있을 거라고 예상되는 모든 속성들을 기술한 클래스

