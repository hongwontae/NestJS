1. TypeOrmModule.forRoot() 내부 동작
=> @Module({
    imports : [
        TypeOrmModule.forRoot({
            type : 'sqlite',
            database : 'db.sqlite',
            entities : [User, Report],
            synchronize : true
        })
    ]
})

1-1. forRoot()는 내부적으로 TypeOrmCoreModule.forRoot()를 호출합니다.
=> 즉, TypeOrmCoreModule.forRoot(options)이 호출되는 것입니다.

1-2. TypeOrmCoreModule.forRoot(options)는 내부적으로 TypeORM의 DataSource 객체를 생성합니다.
=> TypeORM의 DataSource의 인스턴스 생성하고 NestJS DI컨테이너에 등록합니다.

1-3. DataSource가 하는 역할
=> new DataSource(options) => TypeORM이 내부적으로 SQLite와 연결을 맺습니다.
(SQLite은 파일과 연결, Mysql, PostreSQl 같은 서버 기반은 해당 서버 DB와 TCP 연결)
=> await dataSource.initialize(); => DB 연결을 초기화하고, 테이블을 생성합니다.(Synchronize: true일 때만)
=> NestJS의 DI 컨테이너에 DataSource를 등록해서 어디서든 주입 가능하도록 합니다.


2. TypeOrmModule.forFeature() 내부 동작
=> @Module({
  imports: [TypeOrmModule.forFeature([User])], // 엔티티 등록
  providers: [UsersService],
  controllers: [UsersController],
})

2-1. forFeature()은 TypeOrmFeatureModule을 사용해서 동작합니다.
=> static forFeature(entities) {
  return {
    module: TypeOrmModule,
    providers: [...TypeOrmModule.createAsyncProviders(entities)],
    exports: [...TypeOrmModule.createAsyncProviders(entities)],
  };
} => TypeOrmModule.createAsyncProviders(entities)가 Repository를 생성하고 NestJS DI 컨테이너에 등록합니다.


2-2. TypeOrmModule.createAsyncProviders
=> 각 엔티티(User)마다 Repository를 생성합니다.
=> DI 컨테이너에 getRepositoryToken(User)를 Provider로 등록합니다.
=> 실제로 Repository 객체는 dataSource.getRepository(User)로 생성합니다.\
(해당 레파지토리 덕분에 SQL을 직접 실행하지 않고 ORM 방식으로 주고 받습니다.)
=> 즉, forFeature()를 사용하면 NestJS DI 컨테이너에서 @InjectRepository(User)를 통해 
 Repository를 주입받을 수 있게 되는 것입니다.