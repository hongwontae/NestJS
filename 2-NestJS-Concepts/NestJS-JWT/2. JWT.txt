6. JWT 토큰 발급
=> Service 파일을 생성하고 costructor에서 JwtService를 가져옵니다.
=> payload를 생성하고 jwtService.sign()를 통해 서명한 후 return 합니다.
=> payload는 sub(고유 id), role(역할)을 필수적으로 들어가야 합니다.


7. JWT 전략 생성
=> export class JwtStrategy extends PassportStrategy(Strategy)
=> PassportStrategy(Strategy)는 함수를 호출하여 인자 값에 의한 클래스를 상속합니다.
=> super를 호출해서 부모 클래스 초기화하고 이는 토큰 검증 설정입니다.

=> validate 함수를 생성하여 토큰 검증 성공 시 유저 정보를 반환하는 함수를 만듭니다.
=> 해당 함수는 가드를 통해 전략이 실행되고 성공했다면 로직에 따라 자동으로 호출됩니다.


8. 인증 가드 생성
=> Injectable, @nestjs/passport에서 가져온 AuthGuard을 가져옵니다.
=> export class JwtAuthGaurd extends AuthGuard('jwt')를 설정합니다.


9. 로그인 API를 설정합니다.
=> login을 하면 JWT를 반환합니다.


10. 보호
=> @UseGaruds(JwtAuthGaurd)를 통해 JWT가 없는 요청을 차단합니다.