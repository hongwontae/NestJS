1. await NestFactory.create(AppModule)
1-1. AppModule을 해석하고, 내부의 @Module() 데코레이터를 분석합니다.
1-2. 등록된 Controller, Provider(Service), Imports 등을 자동으로 스캔하고 인스턴스를 생성합니다.
1-3. 의존성 주입(DI: Dependency Injection) 시스템을 설정합니다.
1-4. Express(또는 Fastify) 기반의 HTTP 서버를 생성하고, 컨트롤러에 맞게 라우팅을 설정합니다.
1-5. 서버를 실행하여 요청을 받을 준비를 완료합니다.


2. Nest.js의 내부 구조와 동작 방식
2-1. Nest.js는 크게 3가지 주요 개념을 기반으로 동작 (모듈, 컨트롤러, 서비스)
2-2. 의존성 주입 컨테이너를 이용해서 필요한 클래스들을 자동으로 new Class()를 통해 인스턴스를 생성합니다.
2-3. 컨트롤러가 서비스에 의존하면, 서비스 인스턴스를 먼저 생성한 후에 컨트롤러에 주입합니다.


3. 의존성 주입 컨테이너(DI Container)
3-1. Nest.js 내부에서 모든 클래스를 등록하고, 필요할 때 자동으로 객체를 생성하고 주입해주는 시스템입니다.

3-2. 의존성 컨테이너 구체적인 역할
1. @Injectable()이 붙은 모든 클래스를 등록합니다.
=> 이 떄 new class를 호출하여 인스턴스를 DI 컨테이너가 가지고 있습니다. (userServiceInstance)
2. @Controller()에서 constructor(private usersService: UsersService)를
 보면 필요한 의존성을 자동으로 찾아서 주입합니다.
=> 즉, const userControllerInstance = new userController(userServiceInstance);




