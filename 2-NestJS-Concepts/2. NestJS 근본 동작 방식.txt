1. await NestFactory.create(AppModule)
1-1. AppModule을 해석하고, 내부의 @Module() 데코레이터를 분석합니다.
1-2. 등록된 Controller, Provider(Service), Imports 등을 자동으로 스캔하고 인스턴스를 생성합니다.
1-3. 의존성 주입(DI: Dependency Injection) 시스템을 설정합니다.
1-4. Express(또는 Fastify) 기반의 HTTP 서버를 생성하고, 컨트롤러에 맞게 라우팅을 설정합니다.
1-5. 서버를 실행하여 요청을 받을 준비를 완료합니다.


2. DI 컨테이너 흐름
2-1. 앱이 시작되면 @Module에 등록된 클래스(서비스, 컨트롤러 등)가 DI 컨테이너에 등록됩니다.
=> providers, controllers, exports 등으로 등록된 모든 클래스의 정보가 DI 컨테이너에 저장됩니다.
=> 하지만 이 떄 모든 클래스의 인스턴스가 즉시 생성되는 것이 아닙니다.

2-2. DI 컨테이너는 각 클래스가 필요한 의존성을 분석합니다.
=> constructor에 주입된 @Injectable 클래스들을 확인하고, 어떤 인스턴스를 제공해야 하는지 파악합니다.

2-3. 우리가 컨테이너에게 특정 클래스의 인스턴스를 요청하면 생성됩니다.
=> Nest.js가 controllers와 providers에 등록된 클래스들의 인스턴스를 생성해줍니다.
=> Controller가 필요한 Service나 Reposotory 의존성을 확인하고 해당 인스턴스를 생성-연결합니다.

2-4. 필요한 모든 의존성을 해결하고 인스턴스를 반환합니다.
=> 클래스가 의존하는 다른 클래스들이 있다면, 먼저 그 클래스들을 생성해서 주입합니다.
=> 그런 다음 최종적으로 우리가 요청한 클래스의 인스턴스를 만들어 반환합니다.
=> 즉, 레파지토리, 서비스, 컨트롤러 순으로 인스턴스가 반환됩니다.

2-5. 한 번 생성된 인스턴스는 재사용됩니다. (싱글톤)
=> 대부분의 서비스(providers에 등록된 클래스)는 한 번만 생성되고, 이후에는 같은 인스턴스를 계속 사용합니다.





