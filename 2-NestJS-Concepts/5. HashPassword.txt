1. 해시 함수
=> 값을 입력 받아서 해시 값을 만들어냅니다.
=> 들어오는 문자열이 조금만 달라도 크게 달라지는 해시값을 받습니다.
=> 숫자와 글자로 된 output을 받습니다.
=> 해시 output으로 해시 처리 해도 기존의 문자열을 얻을 수 없습니다.


2. Signin Flow
=> email과 password를 받습니다.
=> email을 확인하고 password를 같은 알고리즘 해시 함수를 사용하여 반환값을 얻습니다.
=> DB에 저장되어 있는 해시 PASSWORD와 비교합다.
=> 일치하면 보호된 Resource를 응답으로 보내줍니다.


3. Rainbow Table Attack
=> 해커가 목록을 가지고 전세계적으로 잘 쓰이는 비밀번호를을 모은 목록을 가지고
 각각의 값을 미리 해시로 만듭니다.
=> 해당 값을 가지고 표에 저장합니다.
=> 해커가 DB에 접근합니다.
=> 미리 만든 해시 값과 DB의 해시 값을 비교합니다.
=> 일치하는 값을 탈취합니다.

3-1. 해결 방법
=> 가입 요청이 전달되면 사용자를 대상으로 임의로 숫자와 글자로 이루어진 문자열을 생성합니다.
=> 해당 값을 솔트라고 합니다.
=> 사용자의 비밀번호와 솔트 값을 붙입니다.
=> 해당 값을 해시 처리합니다.
=> 그리고 해시 값과 기존의 솔트 값을 또 붙입니다. (대부분 해시 값과 기존 솔트 값 사이 구분자를 넣습니다.)
=> 해당 값을 Hashed and salted password라고 합니다. 해당 값을 DB에 저장합니다.


3-2. 해결방법 로직 후 로그인 방법
=> 이메일을 통해 DB에 저장된 password를 찾습니다.
=> password에서 구분자를 파악하여 salt와 hash 값을 찾습니다.
=> 그리고 body의 password와 db에서 가져오고 분리한 salt를 합치고 해시 처리합니다.
=> 해시값이 같다면 원하는 resource를 전달합니다.

